name: Release Candidate

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main

jobs:
  create-rc:
    runs-on: ubuntu-latest
    # Only run if PR is from develop branch
    if: github.event.pull_request.head.ref == 'develop'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Check out the PR branch (develop)
          ref: ${{ github.event.pull_request.head.ref }}
          
      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Analyze version for RC release
        id: analyze
        run: |
          # Use the same version analysis logic as stable releases
          node -e "
            const { analyzeCommitsForVersionBump } = require('./server/versionUtils');
            const analysis = analyzeCommitsForVersionBump();
            
            console.log('üìä RC Version Analysis:');
            console.log('Current stable version:', analysis.currentStableVersion);
            console.log('Suggested next version:', analysis.suggestedVersion);
            console.log('Bump type:', analysis.bumpType);
            console.log('Total commits:', analysis.totalCommits);
            
            // Set base version for RC releases
            const fs = require('fs');
            const output = fs.readFileSync(process.env.GITHUB_OUTPUT, 'utf8');
            fs.writeFileSync(process.env.GITHUB_OUTPUT, output + 
              'base_version=' + analysis.suggestedVersion + '\\n' +
              'current_stable=' + analysis.currentStableVersion + '\\n' +
              'reasoning=' + analysis.reasoning + '\\n'
            );
          "
          
      - name: Check if RC release needed
        id: check
        run: |
          # Use analyzed base version instead of package.json
          BASE_VERSION="${{ steps.analyze.outputs.base_version }}"
          
          # Get the latest RC tag for this base version
          LATEST_RC=$(git tag -l "v${BASE_VERSION}-rc*" | sort -V | tail -n1)
          
          if [ -z "$LATEST_RC" ]; then
            echo "rc_number=1" >> $GITHUB_OUTPUT
            echo "create_release=true" >> $GITHUB_OUTPUT
            echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          else
            # Extract RC number and increment
            RC_NUM=$(echo $LATEST_RC | grep -o 'rc[0-9]*' | grep -o '[0-9]*')
            NEXT_RC=$((RC_NUM + 1))
            
            # Check if there are new commits since last RC
            COMMITS_SINCE=$(git rev-list --count $LATEST_RC..HEAD)
            if [ "$COMMITS_SINCE" -gt 0 ]; then
              echo "rc_number=$NEXT_RC" >> $GITHUB_OUTPUT
              echo "create_release=true" >> $GITHUB_OUTPUT
              echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
            else
              echo "create_release=false" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Update package.json with RC version
        if: steps.check.outputs.create_release == 'true'
        run: |
          NEW_VERSION="${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}"
          echo "Updating package.json version to: $NEW_VERSION"
          
          # Update package.json version
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit the version change with conflict resolution
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION for RC release"
          
          # Pull and rebase before pushing to handle any concurrent changes
          echo "üîÑ Pulling latest changes before push..."
          git fetch origin develop
          if ! git rebase origin/develop; then
            echo "‚ö†Ô∏è Rebase conflicts detected, attempting resolution..."
            # For package.json conflicts, prefer our version (the RC version)
            git checkout --ours package.json 2>/dev/null || true
            git add package.json 2>/dev/null || true
            git rebase --continue 2>/dev/null || true
          fi
          
          # Push with retry logic
          echo "üì§ Pushing to develop..."
          for i in {1..3}; do
            if git push origin develop; then
              echo "‚úÖ Successfully pushed to develop"
              break
            else
              echo "‚ö†Ô∏è Push failed (attempt $i/3), retrying..."
              git fetch origin develop
              git rebase origin/develop 2>/dev/null || true
              sleep $((i * 2))
            fi
          done
          
      - name: Set up Docker Buildx
        if: steps.check.outputs.create_release == 'true'
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        if: steps.check.outputs.create_release == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker images
        if: steps.check.outputs.create_release == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            rcourtman/pulse:v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}
            rcourtman/pulse:rc
          
      - name: Set up Node.js
        if: steps.check.outputs.create_release == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies and build CSS
        if: steps.check.outputs.create_release == 'true'
        run: |
          echo "Installing dependencies for CSS build..."
          npm install
          echo "Building CSS with Tailwind..."
          npm run build:css
          
      - name: Create Release Archive
        if: steps.check.outputs.create_release == 'true'
        run: |
          echo "üì¶ Building RC release tarball..."
          
          # Create staging directory for proper release structure
          RC_VERSION="${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}"
          RELEASE_DIR_NAME="pulse-v$RC_VERSION"
          STAGING_PARENT_DIR="pulse-rc-staging"
          STAGING_FULL_PATH="$STAGING_PARENT_DIR/$RELEASE_DIR_NAME"
          
          # Cleanup and create staging
          rm -rf "$STAGING_PARENT_DIR"
          mkdir -p "$STAGING_FULL_PATH"
          
          echo "Copying application files to $STAGING_FULL_PATH..."
          
          # Copy server files (excluding tests) - using rsync for better handling
          rsync -av --progress server/ "$STAGING_FULL_PATH/server/" --exclude 'tests/' || cp -r server "$STAGING_FULL_PATH/"
          
          # Copy source files (including built CSS and public assets)
          mkdir -p "$STAGING_FULL_PATH/src"
          rsync -av --progress src/public/ "$STAGING_FULL_PATH/src/public/" || cp -r src/public "$STAGING_FULL_PATH/src/"
          cp src/index.css "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/index.css not found"
          cp src/tailwind.config.js "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/tailwind.config.js not found"
          cp src/postcss.config.js "$STAGING_FULL_PATH/src/" 2>/dev/null || echo "Warning: src/postcss.config.js not found"
          
          # Copy root files
          cp package.json "$STAGING_FULL_PATH/"
          cp package-lock.json "$STAGING_FULL_PATH/"
          [ -f README.md ] && cp README.md "$STAGING_FULL_PATH/"
          [ -f LICENSE ] && cp LICENSE "$STAGING_FULL_PATH/"
          [ -f CHANGELOG.md ] && cp CHANGELOG.md "$STAGING_FULL_PATH/"
          [ -f docker-compose.yml ] && cp docker-compose.yml "$STAGING_FULL_PATH/"
          [ -f Dockerfile ] && cp Dockerfile "$STAGING_FULL_PATH/"
          
          # Copy scripts and docs
          echo "Copying scripts directory..."
          mkdir -p "$STAGING_FULL_PATH/scripts/"
          if [ -f "scripts/install-pulse.sh" ]; then
            cp scripts/install-pulse.sh "$STAGING_FULL_PATH/scripts/"
            echo "‚úì Copied install-pulse.sh"
          else
            echo "‚ö†Ô∏è Warning: scripts/install-pulse.sh not found"
          fi
          
          if [ -d "docs" ]; then
            rsync -av --progress docs/ "$STAGING_FULL_PATH/docs/" || cp -r docs "$STAGING_FULL_PATH/"
          fi
          
          # Install production dependencies in staging
          echo "Installing production dependencies..."
          (cd "$STAGING_FULL_PATH" && npm install --omit=dev --ignore-scripts)
          
          # Verify essential files
          echo "Verifying essential files..."
          if [ ! -f "$STAGING_FULL_PATH/package.json" ]; then
            echo "Error: Missing package.json"
            exit 1
          fi
          if [ ! -f "$STAGING_FULL_PATH/server/index.js" ]; then
            echo "Error: Missing server/index.js"
            exit 1
          fi
          if [ ! -d "$STAGING_FULL_PATH/node_modules" ]; then
            echo "Error: Missing node_modules"
            exit 1
          fi
          if [ ! -f "$STAGING_FULL_PATH/scripts/install-pulse.sh" ]; then
            echo "Error: Missing scripts/install-pulse.sh"
            exit 1
          fi
          echo "‚úì All essential files verified"
          
          # Create tarball with proper directory structure
          echo "Creating tarball..."
          (cd "$STAGING_PARENT_DIR" && tar -czf "../pulse-v$RC_VERSION.tar.gz" "$RELEASE_DIR_NAME")
          
          # Cleanup staging
          rm -rf "$STAGING_PARENT_DIR"
          
          # Show tarball info
          ls -lh "pulse-v$RC_VERSION.tar.gz"
          echo "‚úÖ RC release tarball created with production dependencies"
          
      - name: Generate Release Body with Changelog
        if: steps.check.outputs.create_release == 'true'
        id: release_body
        run: |
          echo "Generating release body with detailed changelog..."
          
          # Get the PR body
          PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body -q .body)
          
          # Start building the release body
          cat > release_body.md << 'HEADER'
          ## üß™ Release Candidate ${{ steps.check.outputs.rc_number }}
          
          This is a release candidate for testing. Please report any issues you find.
          
          HEADER
          
          # Generate detailed changelog using the same logic as stable releases
          echo "üìù Generating detailed changelog from commits..."
          
          # For RC releases, compare against the previous RC or last stable
          LATEST_RC=$(git tag -l "v*-rc*" | sort -V | tail -1)
          if [ -n "$LATEST_RC" ]; then
            PREV_TAG="$LATEST_RC"  # Use last RC for incremental changelog
            echo "üìä Using previous RC tag: $PREV_TAG"
          else
            PREV_TAG=$(git tag -l "v*" | grep -v "rc\|alpha\|beta" | sort -V | tail -1)  # Use last stable
            echo "üìä No previous RC found, using last stable: $PREV_TAG"
          fi
          
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG="v0.0.0"
          fi
          
          echo "üìä Analyzing commits from $PREV_TAG to HEAD"
          
          # Export variables for the changelog script
          export PREV_TAG="$PREV_TAG"
          export NEW_VERSION="${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}"
          export BUMP_TYPE="rc"
          export REASONING="Release candidate for testing"
          
          # Generate detailed changelog using the same script as stable releases
          if [ -f scripts/generate-changelog.js ]; then
            echo "üîß Using changelog script for detailed RC changelog"
            node scripts/generate-changelog.js
            
            # Extract just the "What's Changed" section for the release body
            if [ -f CHANGELOG.md ]; then
              echo "---" >> release_body.md
              echo "" >> release_body.md
              # Add the changelog content (skip installation instructions for RC)
              sed -n '/## What'\''s Changed/,/## üöÄ Installation & Update Instructions/{/## üöÄ Installation & Update Instructions/!p;}' CHANGELOG.md >> release_body.md
              echo "---" >> release_body.md
            fi
          else
            echo "‚ö†Ô∏è Changelog script not found, using basic commit analysis"
            
            # Fallback: Basic commit analysis
            echo "---" >> release_body.md
            echo "" >> release_body.md
            echo "## What's Changed" >> release_body.md
            echo "" >> release_body.md
            
            # Get commits since last stable release
            git log $PREV_TAG..HEAD --oneline --no-merges | grep -v "chore: bump version\|ü§ñ Generated with\|merge pull request" | head -20 | while read commit; do
              echo "- $commit" >> release_body.md
            done
            echo "" >> release_body.md
            echo "---" >> release_body.md
          fi
          
          # Skip PR summary extraction since changelog covers all changes
          
          # Add the standard update instructions
          cat >> release_body.md << 'FOOTER'
          
          ### üîÑ **Existing Users - Update to RC**
          
          #### üñ•Ô∏è **Web Interface Update (Available from v3.27.2+)**
          **‚ú® Switch to RC channel for testing:**
          1. Open your Pulse web interface
          2. Go to **Settings** ‚Üí **System** tab ‚Üí **Software Updates**
          3. Select **"RC"** channel to receive release candidates
          4. Click **"Check for Updates"** 
          5. Click **"Apply Update"** to install this RC version
          6. The interface will automatically refresh after update
          
          > **Note**: You can switch back to "Stable" channel anytime
          
          #### üõ†Ô∏è **Script-Based Update**
          **For LXC, VMs, and regular installations:**
          ```bash
          # Update to this specific RC version
          cd /opt/pulse/scripts
          ./install-pulse.sh --update --version v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}
          ```
          
          #### üê≥ **Docker Update**
          ```bash
          # Pull this specific RC version
          docker pull rcourtman/pulse:v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}
          
          # Or use the rolling RC tag (always latest RC)
          docker pull rcourtman/pulse:rc
          
          # Update with docker-compose
          docker compose down && docker compose pull && docker compose up -d
          
          # Or update manually
          docker stop pulse && docker rm pulse
          docker run -d --name pulse -p 7655:7655 -v pulse-config:/app/config rcourtman/pulse:rc
          ```
          
          ### üì• **New Users - Fresh RC Installation**
          
          #### **Automated Installer**
          ```bash
          # Install this specific RC version
          curl -sL https://raw.githubusercontent.com/rcourtman/Pulse/main/scripts/install-pulse.sh | bash -s -- --version v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}
          ```
          
          #### **Manual Download**
          ```bash
          wget https://github.com/rcourtman/Pulse/releases/download/v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}/pulse-v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}.tar.gz
          tar -xzf pulse-v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}.tar.gz
          cd pulse-v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}
          npm install --production
          npm start
          ```
          
          ### ‚ö†Ô∏è **Testing Notes**
          - **This is a pre-release for testing only**
          - **Not recommended for production environments**
          - Please report any issues on [GitHub Issues](https://github.com/rcourtman/Pulse/issues)
          - The `:rc` Docker tag always points to the latest RC version
          - You can easily switch between Stable and RC channels in the web interface
          FOOTER
          
          echo "Release body generated successfully!"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create RC Release
        if: steps.check.outputs.create_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}
          name: v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}
          draft: true
          prerelease: true
          generate_release_notes: false
          files: pulse-v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }}.tar.gz
          body_path: release_body.md
            
      - name: Auto-merge PR to main
        if: steps.check.outputs.create_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîÑ Auto-merging PR #${{ github.event.pull_request.number }} to main..."
          
          # Add a small delay to ensure release is fully created
          sleep 5
          
          # Merge the PR
          gh pr merge ${{ github.event.pull_request.number }} --merge --admin \
            --subject "Auto-merge: RC v${{ steps.check.outputs.base_version }}-rc${{ steps.check.outputs.rc_number }} ready" \
            --body "Automatically merged after successful RC release creation"
          
          echo "‚úÖ PR successfully merged to main"